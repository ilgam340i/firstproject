package ru.vagapov.userapi.dao.Impl;


import jakarta.persistence.Query;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;

import ru.vagapov.userapi.dao.UserDao;
import ru.vagapov.userapi.entity.UserEntity;
import ru.vagapov.userapi.util.ConnectionUtil;


import java.time.LocalDate;
import java.util.List;


public class UserDaoHibernateImpl implements UserDao {
    private ConnectionUtil ConnectionUtil = new ConnectionUtil();
    @Override
    public void createUsersTable() {
        try (Session session =  ConnectionUtil.getSessionFactory().openSession()){

            Transaction transaction = session.beginTransaction();
            String sql = " CREATE TABLE IF NOT EXISTS users (" +
                    "id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
                    "firstName VARCHAR(255) NOT NULL," +
                    "lastName VARCHAR(255) NOT NULL ," +
                    "birthDate TIMESTAMP," +
                    "birthPlace  VARCHAR(255) NOT NULL," +
                    "age SMALLINT)";
            Query query = session.createNativeQuery(sql).addEntity(UserEntity.class);

            transaction.commit();
        } catch (HibernateException e) {
            throw new RuntimeException(e);
        }


    }

    @Override
    public void dropUsersTable() {
        try (Session session =  ConnectionUtil.getSessionFactory().openSession()){

            Transaction transaction = session.beginTransaction();
        String sql = "DROP TABLE IF EXISTS users";
            Query query = session.createNativeQuery(sql).addEntity(UserEntity.class);

            transaction.commit();
        } catch (HibernateException e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public void saveUser(String firstName, String lastName, LocalDate birthDate, String birthPlace, Byte age) {
        try (Session session =  ConnectionUtil.getSessionFactory().openSession()){

            Transaction transaction = session.beginTransaction();
            String sql = "DROP TABLE IF EXISTS users";
            Query query = session.createNativeQuery(sql).addEntity(UserEntity.class);

            transaction.commit();
        } catch (HibernateException e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public void removeUserById(Long id) {

    }

    @Override
    public List<UserEntity> getAllUsers() {
        return List.of();
    }

    @Override
    public void cleanUsersTable() {

    }
}
