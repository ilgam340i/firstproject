package ru.vagapov.userapi.dao.Impl;

import ru.vagapov.userapi.dao.UserDao;
import ru.vagapov.userapi.entity.UserEntity;
import ru.vagapov.userapi.util.ConnectionUtil;

import java.sql.*;
import java.time.Instant;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.List;

public class UserDaoJDBCImpl implements UserDao {

    private final ConnectionUtil connectionUtil = new ConnectionUtil();
    public UserDaoJDBCImpl() {
    }

    public void createUsersTable() {
        try (Connection connection = connectionUtil.getConnection()){
            String sql = " CREATE TABLE IF NOT EXISTS users (" +
                    "id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
                    "firstName VARCHAR(255) NOT NULL," +
                    "lastName VARCHAR(255) NOT NULL ," +
                    "birthDate TIMESTAMP," +
                    "birthPlace  VARCHAR(255) NOT NULL," +
                    "age SMALLINT)";
            Statement statement = connection.createStatement();
            statement.execute(sql);
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public void dropUsersTable() {
        try(Connection connection = connectionUtil.getConnection()) {
            String sql = "DROP TABLE IF EXISTS users";
            Statement statement = connection.createStatement();
            statement.execute(sql);
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public void saveUser(String firstName,
                         String lastName,
                         LocalDate birthDate,
                         String birthPlace,
                         Byte age) {
        try (Connection connection = connectionUtil.getConnection()){
            String sql = "INSERT INTO users ( firstName, lastName, birthDate, birthPlace, age) VALUES ( ?, ?, ?, ?, ?)";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);

            preparedStatement.setString(1, firstName);
            preparedStatement.setString(2, lastName);
            preparedStatement.setDate(3, Date.valueOf(birthDate));
            preparedStatement.setString(4, birthPlace);
            preparedStatement.setByte(5, age);
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public void removeUserById(Long id) {
        try(Connection connection = connectionUtil.getConnection()) {
            String sql = "DELETE FROM users WHERE id=?";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setLong(1, id);
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public List<UserEntity> getAllUsers() {
        List<UserEntity> userEntityList = new ArrayList<>();
        try(Connection connection = connectionUtil.getConnection()){
            String sql = "SELECT * FROM users";
            Statement statement = connection.createStatement();
            ResultSet rs = statement.executeQuery(sql);
            while (rs.next()) {
                UserEntity user = new UserEntity();
                user.setId(rs.getLong(1));
                user.setFirstName(rs.getString(2));
                user.setLastName(rs.getString(3));
                //user.setBirthDate(OffsetDateTime.ofInstant(Instant.ofEpochMilli(rs.getDate(4).getTime()), ZoneId.of("UTC")));
                user.setBirthPlace(rs.getString(5));
                user.setAge(rs.getByte(6));
                userEntityList.add(user);
            }
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

        return userEntityList;
    }

    public void cleanUsersTable() {
        String sql = "TRUNCATE TABLE users";
        try(Connection connection = connectionUtil.getConnection()) {
            Statement statement = connection.createStatement();
            statement.execute(sql);
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

}
